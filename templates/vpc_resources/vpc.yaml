AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon VPC for AWS DMS Endpoints
Parameters:
  StackName:
    Type: String
  Env:
    Description: Environment Name
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prd
  VpcCidr:
    Description: First and Second Octet of VPC, For example (10.0/172.16/192.168)
    Type: String
    AllowedPattern: "^(10\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168)$"
    ConstraintDescription: xxx.xxx
  EnableNATGateway:
    Default: true
    Type: String
    AllowedValues: [true, false]

Conditions:
  EnableNATGateway: !Equals [!Ref EnableNATGateway, true]

Mappings:
  VpcConfig:
    dev:
      Vpc: .0.0/16
      PublicSubnet: .0.0/22
      PrivateSubnetA: .4.0/22
      PrivateSubnetC: .8.0/22
  SubnetAZ:
    dev:
      PublicSubnet: a
      PrivateSubnetA: a
      PrivateSubnetC: c

Resources:
  #-----------------------------------------------------------------------------
  # VPC
  #-----------------------------------------------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub
        - ${VpcCidr}${Subnet}
        - Subnet: !FindInMap [VpcConfig, !Ref Env, Vpc]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  #-----------------------------------------------------------------------------
  # Internet Gateway
  #-----------------------------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  #-----------------------------------------------------------------------------
  # Public Route Table
  #-----------------------------------------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  #-----------------------------------------------------------------------------
  # Public Subnet
  #-----------------------------------------------------------------------------
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !FindInMap [SubnetAZ, !Ref Env, PublicSubnet]
      MapPublicIpOnLaunch: true
      CidrBlock: !Sub
        - ${VpcCidr}${Subnet}
        - Subnet: !FindInMap [VpcConfig, !Ref Env, PublicSubnet]

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  #-----------------------------------------------------------------------------
  # Private Route Table
  #-----------------------------------------------------------------------------
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  #-----------------------------------------------------------------------------
  # Private Subnet
  #-----------------------------------------------------------------------------
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !FindInMap [SubnetAZ, !Ref Env, PrivateSubnetA]
      CidrBlock: !Sub
        - ${VpcCidr}${Subnet}
        - Subnet: !FindInMap [VpcConfig, !Ref Env, PrivateSubnetA]

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Sub
        - ${AWS::Region}${AZ}
        - AZ: !FindInMap [SubnetAZ, !Ref Env, PrivateSubnetC]
      CidrBlock: !Sub
        - ${VpcCidr}${Subnet}
        - Subnet: !FindInMap [VpcConfig, !Ref Env, PrivateSubnetC]

  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

  #-----------------------------------------------------------------------------
  # NAT Gateway
  #-----------------------------------------------------------------------------
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: EnableNATGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: EnableNATGateway
    Properties:
      Domain: Vpc

  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: EnableNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  #-----------------------------------------------------------------------------
  # VPC Endpoints
  #-----------------------------------------------------------------------------
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc
      RouteTableIds:
        - !Ref PrivateRouteTable

  Ec2MessageEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  EC2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  SsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  SsmAgentEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  SecretManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: !Ref Vpc
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Endpoint Security Group
      GroupDescription: Enable SSM Session to the Linux instance
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Sub
            - ${VpcCidr}${Subnet}
            - Subnet: !FindInMap [VpcConfig, !Ref Env, Vpc]

  Ec2SsmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent-minimum-s3-permissions.html
  S3BucketPolicyForSSM:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketPolicyForSSM
      Roles:
        - !Ref Ec2SsmRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*
              - !Sub arn:aws:s3:::amazon-ssm-${AWS::Region}/*
              - !Sub arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*
              - !Sub arn:aws:s3:::aws-ssm-${AWS::Region}/*
              - !Sub arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*
              - !Sub arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*

Outputs:
  VpcId:
    Value: !Ref Vpc
  VpcCidrBlock:
    Value: !GetAtt Vpc.CidrBlock
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
  PrivateSubnetC:
    Value: !Ref PrivateSubnetC
  Ec2SsmRoleId:
    Value: !Ref Ec2SsmRole
